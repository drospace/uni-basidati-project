--creazione utenti--
CREATE USER DBAHOLDINGCOMPANY IDENTIFIED BY GEMINI
CREATE USER DIPENDENTEHR IDENTIFIED BY TAURUS
CREATE USER SUPERVISOREHR IDENTIFIED BY LIBRA
CREATE USER DIPENDENTECN IDENTIFIED BY ARIES
CREATE USER SUPERVISORECN IDENTIFIED BY PISCES
CREATE USER DIPENDENTECONTABILE IDENTIFIED BY SAGITTARIUS
CREATE USER SUPERVISORECONTABILE IDENTIFIED BY CANCER
CREATE USER AGENTE_MARKETING IDENTIFIED BY AQUARIUS
CREATE USER DIPENDENTE_LOGISTICO IDENTIFIED BY CAPRICORN
CREATE USER ASSISTENTE_CLIENTI IDENTIFIED BY LEO
CREATE USER SUPERVISORE_LOGISTICO IDENTIFIED BY SCORPIO
CREATE USER RESPONSABILE_FINANZIARIO IDENTIFIED BY VIRGO

--assegnazione privilegi agli utenti--
GRANT ALL PRIVILEGES TO DBAHOLDINGCOMPANY

GRANT SELECT ON CONTRATTO  TO DIPENDENTEHR
GRANT SELECT ON DIPENDENTE TO DIPENDENTEHR

GRANT SELECT, INSERT, UPDATE ON DIPENDENTE TO SUPERVISOREHR
GRANT SELECT, INSERT, UPDATE ON CONTRATTO TO SUPERVISOREHR
GRANT SELECT, INSERT, UPDATE ON STIPENDIO TO SUPERVISOREHR

GRANT SELECT, INSERT ON CONSULENTE TO DIPENDENTECN
GRANT SELECT, INSERT ON CONSULENZA TO DIPENDENTECN

GRANT MANAGER ON CONSULENTE TO SUPERVISORECN
GRANT MANAGER ON CONSULENZA TO SUPERVISORECN

GRANT SELECT ON TRANSAZIONE TO DIPENDENTECONTABILE
GRANT SELECT ON ACCREDITO DIPENDENTECONTABILE
GRANT SELECT ON ADDEBITO DIPENDENTECONTABILE

GRANT SELECT ON TRANSAZIONE TO SUPERVISORECONTABILE
GRANT SELECT ON ACCREDITO TO SUPERVISORECONTABILE
GRANT SELECT ON ADDEBITO TO SUPERVISORECONTABILE
GRANT SELECT ON COMPAGNIA TO SUPERVISORECONTABILE

GRANT MANAGER ON CAMPAGNA_DI_MARKETING TO AGENTE_MARKETING

GRANT MANAGER ON PRODOTTO DIPENDENTE_LOGISTICO
GRANT MANAGER ON GIACENZA TO DIPENDENTE_LOGISTICO
GRANT MANAGER ON MAGAZZINO TO DIPENDENTE_LOGISTICO

GRANT SELECT ON VENDITE TO DIPENDENTE_LOGISTICO
GRANT SELECT ON VENDITA TO DIPENDENTE_LOGISTICO

GRANT MANAGER ON CLIENTE TO SUPERVISORE_LOGISTICO
GRANT MANAGER ON VENDITA TO SUPERVISORE_LOGISTICO
GRANT MANAGER ON SERVIZIO TO SUPERVISORE_LOGISTICO
GRANT MANAGER ON PRODOTTO TO SUPERVISORE_LOGISTICO

GRANT MANAGER ON INVESTIMENTO TO RESPONSABILE_FINANZIARIO

--creazione tabelle--
CREATE TABLE COMPAGNIA(
    PARTITA_IVA NUMBER(11) CONSTRAINT COMPAGNIAPK PRIMARY KEY,
    PATRIMONIO NUMBER(38) NOT NULL,
    NOME VARCHAR(50) NOT NULL,
    CONSTRAINT COMPAGNIALEN CHECK (LENGTH(TO_CHAR(PARTITA_IVA)) = 11),
);


CREATE SEQUENCE MAGAZZINO_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE MAGAZZINO (
  ID_MAGAZZINO NUMBER(10) CONSTRAINT MAGAZZINOPK PRIMARY KEY,
  CAPIENZA NUMBER(10) NOT NULL,
  STRADA_CIVICO_CAP VARCHAR(150) NOT NULL,
  CONSTRAINT CAPIENZA_RANGE CHECK (CAPIENZA >= 100 AND CAPIENZA <= 1000),
  CONSTRAINT INDIRIZZOEXP CHECK (REGEXP_LIKE(STRADA_CIVICO_CAP, '^[A-Za-z\s]+ \d+ \d+$'))
);

CREATE OR REPLACE TRIGGER MAGAZZINO_AUTOINCREMENTO
BEFORE INSERT ON MAGAZZINO
FOR EACH ROW
BEGIN
  :NEW.ID_MAGAZZINO := MAGAZZINO_SEQ.NEXTVAL;
END;
/


CREATE SEQUENCE GIACENZA_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE GIACENZA (
   ID NUMBER(10) CONSTRAINT GIACENZAPK PRIMARY KEY,
   POSTO VARCHAR(3) NOT NULL,
   BARCODE_PRODOTTO NUMBER(13) NOT NULL,
   MAGAZZINO NUMBER(10) NOT NULL,
   CONSTRAINT MAGAZZINOFKGIACENZA FOREIGN KEY (MAGAZZINO) REFERENCES MAGAZZINO(ID_MAGAZZINO)
);

CREATE OR REPLACE TRIGGER GIACENZA_AUTOINCREMENTO
BEFORE INSERT ON GIACENZA
FOR EACH ROW
BEGIN
   :NEW.ID := GIACENZA_SEQ.NEXTVAL;
END;
/

CREATE TABLE PRODOTTO(
   BARCODE NUMBER(13) CONSTRAINT PK_PROD_BARCODE PRIMARY KEY,
   NOME_PRODOTTO VARCHAR(50) NOT NULL,
   PREZZO_EUR NUMBER(10) NOT NULL,
   COMPAGNIA_OFFERENTE NUMBER(11) NOT NULL,
   CONSTRAINT COMPAGNIAFKPRODOTTO FOREIGN KEY (COMPAGNIA_OFFERENTE) REFERENCES COMPAGNIA(PARTITA_IVA),
   CONSTRAINT PRODOTTO_BARCODELEN CHECK (LENGTH(TO_CHAR(BARCODE)) = 13),
   CONSTRAINT PRODOTTO_COMPAGNIALEN CHECK (LENGTH(TO_CHAR(COMPAGNIA_OFFERENTE)) = 11)
);


CREATE SEQUENCE SERVIZIO_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE SERVIZIO (
ID_SERVIZIO NUMBER(10) CONSTRAINT SERVIZIOPK PRIMARY KEY,
NOME_SERVIZIO VARCHAR(30) NOT NULL,
DESCRIZIONE VARCHAR(200) NOT NULL,
COSTO NUMBER(5) NOT NULL,
COMPAGNIA NUMBER(11) NOT NULL,
CONSTRAINT SERVIZIO_COMPAGNIALEN CHECK(LENGTH(TO_CHAR(COMPAGNIA)) = 11),
CONSTRAINT UNICO_SERVIZIO_PER_COMPAGNIA UNIQUE (COMPAGNIA),
CONSTRAINT COMPAGNIAFKSERVIZIO FOREIGN KEY (COMPAGNIA) REFERENCES COMPAGNIA(PARTITA_IVA)
);

CREATE OR REPLACE TRIGGER SERVIZIO_AUTOINCREMENTO
BEFORE INSERT ON SERVIZIO
FOR EACH ROW
BEGIN
   :NEW.ID_SERVIZIO := SERVIZIO_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE CLIENTE_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE CLIENTE (
  ID_CLIENTE NUMBER(10) CONSTRAINT CLIENTEPK PRIMARY KEY,
  CODICE_FISCALE VARCHAR(16),
  P_IVA NUMBER(11),
  TIPOLOGIA_CLIENTE VARCHAR(50) NOT NULL,
  NOMINATIVO VARCHAR(50) NOT NULL,
--   CONSTRAINT CODICEFISCALELEN CHECK(LENGTH(CODICE_FISCALE) = 16),
--   CONSTRAINT PARTITAIVALEN CHECK(LENGTH(TO_CHAR(P_IVA)) = 11),
--   CONSTRAINT CODICEFISCALE_EXP CHECK(REGEXP_LIKE(CODICE_FISCALE, '^([A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST]{1}[0-9LMNPQRSTUV]{2}[A-Z]{1}[0-9LMNPQRSTUV]{3}[A-Z]{1})$|([0-9]{11})$'))
);

CREATE OR REPLACE TRIGGER CLIENTE_AUTOINCREMENTO
BEFORE INSERT ON CLIENTE
FOR EACH ROW
BEGIN
   :NEW.ID_CLIENTE := CLIENTE_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE TRANSAZIONE_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE TRANSAZIONE (
   ID NUMBER(10) CONSTRAINT TRANSAZIONEPK PRIMARY KEY,
   DENARO NUMBER(10) NOT NULL,
   COMPAGNIA NUMBER(11) NOT NULL,
   DATA_TRANSAZIONE DATE NOT NULL,
   CONSTRAINT COMPAGNIAFKTRANSAZIONE FOREIGN KEY (COMPAGNIA) REFERENCES COMPAGNIA(PARTITA_IVA),
   CONSTRAINT TRANSAZIONE_COMPAGNIALEN CHECK(LENGTH(TO_CHAR(COMPAGNIA)) = 11)
);

CREATE OR REPLACE TRIGGER TRANSAZIONE_AUTOINCREMENTO
BEFORE INSERT ON TRANSAZIONE
FOR EACH ROW
BEGIN
   :NEW.ID := TRANSAZIONE_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE ACCREDITO_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE ACCREDITO (
   ID NUMBER(10) CONSTRAINT ACCREDITOPK PRIMARY KEY,
   ID_TRANSAZIONE NUMBER(10) NOT NULL,
   MITTENTE VARCHAR(50) NOT NULL,
   CONSTRAINT TRANSAZIONEFKACCREDITO FOREIGN KEY (ID_TRANSAZIONE) REFERENCES TRANSAZIONE(ID)
);

CREATE OR REPLACE TRIGGER ACCREDITO_AUTOINCREMENTO
BEFORE INSERT ON ACCREDITO
FOR EACH ROW
BEGIN
   :NEW.ID := ACCREDITO_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE ADDEBITO_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE ADDEBITO (
   ID NUMBER(10) CONSTRAINT ADDEBITOPK PRIMARY KEY,
   ID_TRANSAZIONE NUMBER(10) NOT NULL,
   DESTINATARIO VARCHAR(50) NOT NULL,
   CONSTRAINT TRANSAZIONEFKADDEBITO FOREIGN KEY (ID_TRANSAZIONE) REFERENCES TRANSAZIONE(ID)
);

CREATE OR REPLACE TRIGGER ADDEBITO_AUTOINCREMENTO
BEFORE INSERT ON ADDEBITO
FOR EACH ROW
BEGIN
   :NEW.ID := ADDEBITO_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE VENDITA_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE VENDITA (
   ID NUMBER(10) CONSTRAINT ACQUPK PRIMARY KEY,
   ID_VENDITA NUMBER(10) NOT NULL,
   PRODOTTO_BARCODE NUMBER(13),
   ID_SERVIZIO NUMBER(10),
   ID_ACCREDITO NUMBER(10) NOT NULL,
   ID_CLIENTE NUMBER(10) NOT NULL,
   DATA_VENDITA DATE NOT NULL,
   CONSTRAINT CLIENTEFKVENDITA FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
   CONSTRAINT PRODOTTOFKACQU FOREIGN KEY (PRODOTTO_BARCODE) REFERENCES PRODOTTO(BARCODE),
   CONSTRAINT SERVIZIOFKACQU FOREIGN KEY (ID_SERVIZIO) REFERENCES SERVIZIO(ID_SERVIZIO),
   CONSTRAINT VENDITAFKACQU FOREIGN KEY (ID_VENDITA) REFERENCES VENDITA(ID),
   CONSTRAINT ACCREDITOFKACQU FOREIGN KEY (ID_ACCREDITO) REFERENCES ACCREDITO(ID),
   CONSTRAINT ACQU_BARCODELEN CHECK (LENGTH(TO_CHAR(PRODOTTO_BARCODE)) = 13)
);

CREATE OR REPLACE TRIGGER VENDITA_AUTOINCREMENTO
BEFORE INSERT ON VENDITA
FOR EACH ROW
BEGIN
   :NEW.ID := VENDITA_SEQ.NEXTVAL;
END;
/

CREATE TABLE CONSULENTE(
   CODICE_FISCALE VARCHAR(16) CONSTRAINT CONSULENTEPK PRIMARY KEY NOT NULL,
   NOME VARCHAR(20) NOT NULL,
   COGNOME VARCHAR(30) NOT NULL,
   ANNI_ESPERIENZA NUMBER(2) NOT NULL,
   CONSTRAINT CONSULENTE_CODICEFISCALE_EXP CHECK(REGEXP_LIKE(CODICE_FISCALE,'^([A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST]{1}[0-9LMNPQRSTUV]{2}[A-Z]{1}[0-9LMNPQRSTUV]{3}[A-Z]{1})$|([0-9]{11})$')),
   CONSTRAINT CONTROLLO_ANNI_ESPERIENZA CHECK(ANNI_ESPERIENZA >= 5),
   CONSTRAINT CHECK_CODICE_FISCALE_LENGTH CHECK(LENGTH(CODICE_FISCALE) = 16)
);

CREATE SEQUENCE CONSULENZA_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE CONSULENZA (
  ID_CONSULENZA NUMBER(10) CONSTRAINT CONSULENZAPK PRIMARY KEY,
  CAUSA VARCHAR(100) NOT NULL,
  CONSULENTE VARCHAR(16) NOT NULL,
  ADDEBITO NUMBER(10) NOT NULL,
  TIPOLOGIA_CONSULENZA VARCHAR(50) NOT NULL,
  AMBITO VARCHAR(50) NOT NULL,
  COSTI NUMBER(5) NOT NULL,
  DATA_INIZIO DATE NOT NULL,
  DATA_FINE DATE NOT NULL,
  CONSTRAINT CONSULENTEFKCONSULENZA FOREIGN KEY (CONSULENTE) REFERENCES CONSULENTE(CODICE_FISCALE),
  CONSTRAINT ADDEBITOFKCONSULENZA FOREIGN KEY (ADDEBITO) REFERENCES ADDEBITO(ID),
  CONSTRAINT CONTROLLO_DATE CHECK(DATA_FINE > DATA_INIZIO)
);

CREATE OR REPLACE TRIGGER CONSULENZA_AUTOINCREMENTO
BEFORE INSERT ON CONSULENZA
FOR EACH ROW
BEGIN
   :NEW.ID_CONSULENZA := CONSULENZA_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE CAMPAGNA_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE CAMPAGNA_DI_MARKETING(
   CODICE_CAMPAGNA NUMBER(10) CONSTRAINT CAMPAGNAPK PRIMARY KEY,
   NOME_CAMPAGNA VARCHAR(100) NOT NULL,
   CANALE_COMUNICAZIONE VARCHAR(50) NOT NULL,
   DATA_DI_INIZIO_CAMPAGNA DATE NOT NULL,
   DATA_DI_FINE_CAMPAGNA DATE NOT NULL,
   ADDEBITO NUMBER(5) NOT NULL,
   CONSTRAINT ADDEBITOFKCAMPAGNA FOREIGN KEY (ADDEBITO) REFERENCES ADDEBITO(ID),
   CONSTRAINT CAMPAGNA_CONTROLLO_DATE CHECK(DATA_DI_FINE_CAMPAGNA > DATA_DI_INIZIO_CAMPAGNA)
);

CREATE OR REPLACE TRIGGER CAMPAGNA_AUTOINCREMENTO
BEFORE INSERT ON CAMPAGNA_DI_MARKETING
FOR EACH ROW
BEGIN
   :NEW.CODICE_CAMPAGNA := CAMPAGNA_SEQ.NEXTVAL;
END;
/


CREATE SEQUENCE INVESTIMENTO_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE INVESTIMENTO(
   ID_INVESTIMENTO NUMBER(10) CONSTRAINT INVESTIMENTOPK PRIMARY KEY,
   CAPITALE NUMBER(38) NOT NULL,
   ADDEBITO NUMBER(10) NOT NULL,
   COMPAGNIA NUMBER(11) NOT NULL,
   OGGETTO VARCHAR(255) NOT NULL,
   CONSTRAINT COMPAGNIA CHECK(LENGTH(COMPAGNIA) = 11),
   CONSTRAINT ADDEBITOFKINVESTIMENTO FOREIGN KEY (ADDEBITO) REFERENCES ADDEBITO(ID),
   CONSTRAINT COMPAGNIAFKINVESTIMENTO FOREIGN KEY (COMPAGNIA) REFERENCES COMPAGNIA(PARTITA_IVA)
);


CREATE OR REPLACE TRIGGER INVESTIMENTO_AUTOINCREMENTO
BEFORE INSERT ON INVESTIMENTO
FOR EACH ROW
BEGIN
   :NEW.ID_INVESTIMENTO := INVESTIMENTO_SEQ.NEXTVAL;
END;
/

CREATE TABLE DIPARTIMENTO(
  NOME VARCHAR(50) CONSTRAINT DIPARTIMENTOPK PRIMARY KEY NOT NULL,
  COMPAGNIA VARCHAR(11) NOT NULL,
  COMPETENZA VARCHAR(50) NOT NULL,
  CONSTRAINT DIPARTIMENTO_COMPAGNIALEN CHECK(LENGTH(COMPAGNIA) = 11)  
);



CREATE TABLE DIPENDENTE (
   MATRICOLA NUMBER(10) CONSTRAINT MATRICOLAPK PRIMARY KEY NOT NULL,
   CODICE_FISCALE VARCHAR(16) NOT NULL,
   NOME VARCHAR(20) NOT NULL,
   COGNOME VARCHAR(20) NOT NULL,
   DATA_DI_NASCITA DATE,
   DIPARTIMENTO VARCHAR(50) NOT NULL,
   CONSTRAINT DIPARTIMENTOFKDIPENDENTE FOREIGN KEY (DIPARTIMENTO) REFERENCES DIPARTIMENTO(NOME),
   CONSTRAINT DIPENDENTE_CODICEFISCALE_EXP CHECK(REGEXP_LIKE(CODICE_FISCALE, '^([A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST]{1}[0-9LMNPQRSTUV]{2}[A-Z]{1}[0-9LMNPQRSTUV]{3}[A-Z]{1})$|^([0-9]{11})$')),
   CONSTRAINT MATRICOLALEN CHECK(LENGTH(TO_CHAR(MATRICOLA)) = 10)
);

CREATE SEQUENCE CONTRATTO_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE CONTRATTO(
   N_CONTRATTO NUMBER(10) CONSTRAINT CONTRATTOPK PRIMARY KEY,
   DIPENDENTE NUMBER(10) NOT NULL,
   DATA_INIZIO DATE NOT NULL,
   DATA_FINE DATE,
   PAGA NUMBER(5) NOT NULL,
   ORE_GIORNALIERE VARCHAR(10) NOT NULL,
   STATO_CONTRATTO NUMBER(1) NOT NULL,
   CONSTRAINT DIPENDENTEFKCONTRATTO FOREIGN KEY (DIPENDENTE) REFERENCES DIPENDENTE(MATRICOLA),
   CONSTRAINT CONTROLLO_STATO CHECK(STATO_CONTRATTO >= 0 AND STATO_CONTRATTO <= 1)
);


CREATE OR REPLACE TRIGGER CONTRATTO_AUTOINCREMENTO
BEFORE INSERT ON CONTRATTO
FOR EACH ROW
BEGIN
   :NEW.N_CONTRATTO := CONTRATTO_SEQ.NEXTVAL;
END;
/


CREATE SEQUENCE STIPENDIO_SEQ START WITH 1 INCREMENT BY 1;
CREATE TABLE STIPENDIO(
   N_OPERAZIONE NUMBER(10) CONSTRAINT STIPENDIOPK PRIMARY KEY,
   SALARIO NUMBER(5) NOT NULL,
   DATA_EROGAZIONE DATE NOT NULL,
   ADDEBITO NUMBER(10) NOT NULL,
   CONTRATTO NUMBER(10) NOT NULL,
   CONSTRAINT ADDEBITOFKSTIPENDIO FOREIGN KEY (ADDEBITO) REFERENCES ADDEBITO(ID),
   CONSTRAINT CONTRATTOFKSTIPENDIO FOREIGN KEY (CONTRATTO) REFERENCES CONTRATTO(N_CONTRATTO)
);

CREATE OR REPLACE TRIGGER STIPENDIO_AUTOINCREMENTO
BEFORE INSERT ON STIPENDIO
FOR EACH ROW
BEGIN
   :NEW.N_OPERAZIONE := STIPENDIO_SEQ.NEXTVAL;
END;
/
-----------------------------------TRIGGER AREA---------------------------

--1--
CREATE OR REPLACE TRIGGER CRITERIO_CONSERVAZIONE
BEFORE INSERT ON GIACENZA
FOR EACH ROW
DECLARE
   giacenzaCount NUMBER;
   magazzinoCapacity NUMBER;
   locationCapacity NUMBER;
   locationCount NUMBER;
   locationBarcode NUMBER;
BEGIN
   SELECT COUNT(*) INTO giacenzaCount FROM GIACENZA WHERE MAGAZZINO = :NEW.MAGAZZINO;
   SELECT CAPIENZA INTO magazzinoCapacity FROM MAGAZZINO WHERE ID_MAGAZZINO = :NEW.MAGAZZINO;

   IF giacenzaCount >= magazzinoCapacity THEN
      RAISE_APPLICATION_ERROR(-20001, 'La capacità massima del magazzino è stata raggiunta.');
   END IF;

   locationCapacity := 5;
   
   SELECT COUNT(*) INTO locationCount FROM GIACENZA WHERE MAGAZZINO = :NEW.MAGAZZINO AND POSTO = :NEW.POSTO;
   SELECT BARCODE_PRODOTTO INTO locationBarcode FROM GIACENZA WHERE MAGAZZINO = :NEW.MAGAZZINO AND POSTO = :NEW.POSTO;

   IF locationBarcode IS NOT NULL THEN
      IF locationBarcode != :NEW.BARCODE_PRODOTTO THEN
         RAISE_APPLICATION_ERROR(-20001, 'Non è possibile associare nello stesso posto due prodotti con il barcode diverso!');
      END IF;

      IF locationCapacity >= locationCount THEN
         RAISE_APPLICATION_ERROR(-20001, 'Limite del posto superato, non è possibile inserire altri prodotti nel posto selezionato.');
      END IF;

   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND THEN NULL;
END;

--2--
CREATE OR REPLACE TRIGGER CONTROLLO_DATA_TRANSAZIONE
BEFORE INSERT ON TRANSAZIONE
FOR EACH ROW
DECLARE
  todayDate DATE;
  inputDate DATE;
BEGIN
  todayDate := SYSDATE;
  
  SELECT DATA_TRANSAZIONE INTO inputDate FROM TRANSAZIONE WHERE DATA_TRANSAZIONE = :NEW.DATA_TRANSAZIONE;
  
  IF inputDate >= todayDate THEN
    RAISE_APPLICATION_ERROR(-20001, 'Data transazione non valida. Non è possibile inserire una transazione futura!');
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;
END;

--3--
CREATE OR REPLACE TRIGGER CONTROLLO_CONSULENZE
BEFORE INSERT ON CONSULENZA
FOR EACH ROW
WHEN(USER = 'DIPENDENTECN')
DECLARE
   currentYear NUMBER;
   numberOfConsultancies NUMBER;
BEGIN
   SELECT EXTRACT(YEAR FROM SYSDATE) INTO currentYear FROM DUAL;
   SELECT COUNT(*) INTO numberOfConsultancies FROM CONSULENZA WHERE EXTRACT(YEAR FROM DATA_INIZIO) = currentYear;

   IF numberOfConsultancies >= 12 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Limite di richieste superato!');
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      NULL;
END;

--4--
CREATE OR REPLACE TRIGGER CONTROLLO_CAMPAGNA
BEFORE INSERT ON CAMPAGNA_DI_MARKETING
FOR EACH ROW
DECLARE
   isAlreadyRegistered NUMBER;
   startDate DATE;
   endDate DATE;
   minPeriodMonths NUMBER;
   maxPeriodMonths NUMBER;
   monthsPeriod NUMBER;
BEGIN

   SELECT COUNT(*) INTO isAlreadyRegistered FROM CAMPAGNA_DI_MARKETING WHERE NOME_CAMPAGNA = :NEW.NOME_CAMPAGNA
   SELECT DATA_DI_INIZIO_CAMPAGNA INTO startDate FROM CAMPAGNA_DI_MARKETING WHERE DATA_DI_INIZIO_CAMPAGNA = :NEW.DATA_DI_INIZIO_CAMPAGNA 
   SELECT DATA_DI_FINE_CAMPAGNA INTO endDate FROM CAMPAGNA_DI_MARKETING WHERE DATA_DI_FINE_CAMPAGNA = :NEW.DATA_DI_FINE_CAMPAGNA 
   SELECT MONTHS_BETWEEN(startDate,endDate) INTO monthsPeriod;
   minPeriodMonths := 3;


   IF isAlreadyRegistered > 0 THEN
      maxPeriodMonths := 48;
   ELSE
      maxPeriodMonths := 12;
   END IF

   IF monthsPeriod > maxPeriodMonths OR monthsPeriod < minPeriodMonths THEN
      RAISE_APPLICATION_ERROR(-20001, 'Periodo scelto non valido!');
   END IF

EXCEPTION
   WHEN OTHERS THEN
      NULL;
END;

--5--
CREATE OR REPLACE TRIGGER CRITERIO_AGGIUNTA_CONTRATTO
BEFORE INSERT ON CONTRATTO
FOR EACH ROW
DECLARE
   disabledDealCount NUMBER;
   enabledDealCount NUMBER;
BEGIN

   SELECT COUNT(*) INTO enabledDealCount FROM CONTRATTO WHERE STATO_CONTRATTO = 1 AND DIPENDENTE = :NEW.DIPENDENTE;
   IF enabledDealCount > 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Non è possibile associare a due dipendenti uno stesso contratto attivo!');
   ELSE
      SELECT COUNT(*) INTO disabledDealCount FROM CONTRATTO WHERE STATO_CONTRATTO = 0 AND DIPENDENTE = :NEW.DIPENDENTE;

      IF :NEW.DATA_FINE IS NOT NULL THEN

         IF :NEW.DATA_FINE < :NEW.DATA_INIZIO THEN
            RAISE_APPLICATION_ERROR(-20001, 'Le date non sono correttamente registrate!')
         END IF;

         IF disabledDealCount >= 2
            RAISE_APPLICATION_ERROR(-20001, 'Non è possibile associare un ulteriore contratto a tempo determinato!');
         END IF;
      
      END IF;

   END IF;
END;

--6--    
CREATE OR REPLACE TRIGGER CONTROLLO_DATA_VENDITA
BEFORE INSERT ON VENDITA
FOR EACH ROW
BEGIN
  IF (:NEW.DATA_VENDITA > SYSDATE) THEN
    RAISE_APPLICATION_ERROR(-20001, 'La data di VENDITA non può essere futura!');
  END IF;
END;


--7--
CREATE OR REPLACE TRIGGER GESTIONE_INVESTIMENTI
BEFORE INSERT ON INVESTIMENTO
FOR EACH ROW
DECLARE

companyPatrimony COMPAGNIA.PATRIMONIO NUMBER;

countTransaction DATE;
currentMonth NUMBER;
currentYear NUMBER;

BEGIN
   SELECT PATRIMONIO INTO companyPatrimony FROM COMPAGNIA WHERE PARTITA_IVA = :NEW.COMPAGNIA; 

   IF companyPatrimony < 250000 THEN 
   
      RAISE_APPLICATION_ERROR(-20001,'Impossibile effettuare investimento!')
   END IF

   SELECT EXTRACT(MONTH FROM SYSDATE), EXTRACT(YEAR FROM SYSDATE)
   INTO currentMonth, currentYear
   FROM DUAL;

   SELECT COUNT(*) 
   INTO countTransaction
   FROM TRANSAZIONI T
   JOIN ADDEBITO A ON T.ID = A.ID_TRANSAZIONE
   JOIN INVESTIMENTO I ON A.ADDEBITO = I.ID_INVESTIMENTO
   WHERE EXTRACT(MONTH FROM T.DATA_TRANSAZIONE) = currentMonth
   AND EXTRACT(YEAR FROM T.DATA_TRANSAZIONE) = currentYear
   AND T.DENARO > 500000

   IF countTransaction > 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Non è consentito effettuare più di una transazione considerevole al mese!')

EXCEPTION
   WHEN OTHERS THAN
      NULL;
END;

--8--
CREATE OR REPLACE TRIGGER UPDATE_ETA_DIPENDENTE
BEFORE INSERT OR UPDATE ON DIPENDENTE
FOR EACH ROW
BEGIN
   :NEW.ETA := EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM :NEW.DATA_DI_NASCITA);
END;

BEGIN
   DBMS_SCHEDULER.CREATE_JOB (
      job_name        => 'AGGIORNAMENTO_ETA',
      job_type        => 'PLSQL_BLOCK',
      job_action      => 'BEGIN
                            UPDATE DIPENDENTE
                            SET ETA = EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM DATA_DI_NASCITA);
                         END;',
      start_date      => SYSTIMESTAMP,
      repeat_interval => 'FREQ=DAILY',
      end_date        => NULL,
      enabled         => TRUE
   );
END;


-------------procedure area---------------------

CREATE OR REPLACE PROCEDURE addProductToWarehouse(
warehouseID IN NUMBER,
companyID NUMBER,
productBarcode IN NUMBER,
productName IN VARCHAR,
price IN NUMBER
)
IS
   isAlreadyRegistered NUMBER;
   warehouseProducts NUMBER;
   warehouseMaximumCapacity NUMBER;
   warehouseSlot VARCHAR(3) := 'A00';
BEGIN

   SELECT COUNT(*) INTO warehouseProducts FROM GIACENZA WHERE ID_MAGAZZINO = warehouseID;
   SELECT CAPIENZA INTO warehouseMaximumCapacity FROM MAGAZZINO WHERE ID_MAGAZZINO = warehouseID;

   IF warehouseProducts < warehouseMaximumCapacity THEN


      SELECT COUNT(*) INTO isAlreadyRegistered FROM PRODOTTO WHERE BARCODE = BARCODE_PRODOTTO;

      IF isAlreadyRegistered = 0 THEN

         INSERT INTO PRODOTTO (BARCODE, NOME_PRODOTTO,PREZZO_EUR, COMPAGNIA_OFFERENTE)
         VALUES (productBarcode,productName,price,companyID);
      
      END IF;

      SELECT MAX(POSTO) INTO warehouseSlot FROM GIACENZA WHERE ID_MAGAZZINO = warehouseID

      INSERT INTO GIACENZA(ID,POSTO,BARCODE_PRODOTTO,ID_MAGAZZINO)
      VALUES (GIACENZA_SEQ.NEXTVAL,'nuovopostodacalcolare',productBarcode,warehouseID);

      COMMIT;

      DBMS_OUTPUT.PUT_LINE('Prodotto registrato con successo. Il nuovo posto è ');

      EXCEPTION
         WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE("Si è verificato un errore durante l'aggiunta del prodotto!");

   ELSE
      DBMS_OUTPUT.PUT_LINE("Magazzino pieno, impossibile registrare ulteriori prodotti!");

   END IF;


END;
/